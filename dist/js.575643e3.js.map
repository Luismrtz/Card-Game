{"version":3,"sources":["js/canvas.js","js/index.js"],"names":["particleArray","canvas","document","getElementById","ctx","getContext","width","window","innerWidth","height","innerHeight","Particle","x","y","directionX","directionY","size","color","beginPath","arc","Math","PI","fillStyle","fill","draw","init","i","random","push","animate","requestAnimationFrame","clearRect","length","update","addEventListener","p1","require","p2","p3","p4","p5","AudioController","bgMusic","Audio","flipSound","matchSound","victorySound","gameOverSound","volume","loop","play","pause","currentTime","stopMusic","MixOrMatch","totalTime","cards","cardsArray","timeRemaining","timer","ticker","ac","cardToCheck","totalClicks","matchedCards","busy","setTimeout","startMusic","shuffleCard","countDown","startCountDown","hideCards","innerText","forEach","card","classList","remove","canFlipCard","flip","add","checkForCardMatch","getCardType","cardMatch","cardMisMatch","card1","card2","match","victory","getElementsByClassName","src","setInterval","gameOver","clearInterval","randIndex","floor","style","order","includes","ready","overlays","Array","from","game","overlay","startGame","flipCard","readyState"],"mappings":"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","file":"js.575643e3.js","sourceRoot":"..\\src","sourcesContent":["\r\n\r\nconst canvas = document.getElementById(\"canvas1\");\r\nconst ctx = canvas.getContext('2d');\r\nctx.canvas.width = window.innerWidth;\r\nctx.canvas.height = window.innerHeight;\r\nlet particleArray;\r\n\r\n// create constructor function\r\nclass Particle {\r\n    constructor(x, y, directionX, directionY, size, color) {\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n        this.directionX = directionX;\r\n        this.directionY = directionY;\r\n        this.size = size;\r\n        this.color = color;\r\n    }\r\n\r\n    // method to draw individual particle\r\n    draw() {\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);\r\n        ctx.fillStyle = this.color;\r\n        ctx.fill();\r\n    }\r\n\r\n    // to bounce when at edge of screen\r\n    update() {\r\n        if (this.x > canvas.width || this.x < 0 ) {\r\n            this.directionX = -this.directionX;\r\n        }\r\n        if (this.y + this.size > canvas.height || this.y - this.size < 0) {\r\n            this.directionY = -this.directionY;\r\n        }\r\n        this.x += this.directionX;\r\n        this.y += this.directionY;\r\n\r\n        this.draw();\r\n    }    \r\n    \r\n}\r\n\r\nfunction init() {\r\n    particleArray = [];\r\n    for ( let i=0; i < 20; i++) {\r\n        let size = Math.random() * 10;\r\n        let x = Math.random() * (innerWidth - size * .2);\r\n        let y = Math.random() * (innerHeight - size * .2);   // so they dont get stuck in wall\r\n        let directionX = (Math.random() * .4) - .2;\r\n        let directionY = (Math.random() * .4) - .2;\r\n        let color = 'white';\r\n\r\n\r\n        particleArray.push(new Particle(x, y, directionX, directionY, size, color));\r\n\r\n    }\r\n}\r\n\r\n//animation\r\nfunction animate() {\r\n    requestAnimationFrame(animate); // RAF api\r\n    ctx.clearRect (0,0, innerWidth, innerHeight); // clear canvas over and over\r\n\r\n    // itterate through particle array, run update method for each particle\r\n    //update method checks if particle has reached end of screen, and if NOT. It draws it\r\n    for (let i = 0; i < particleArray.length; i++) { \r\n        particleArray[i].update();\r\n    }\r\n}\r\ninit();\r\nanimate();\r\n\r\nwindow.addEventListener('resize', () => {\r\n    canvas.width = innerWidth;\r\n    canvas.height = innerHeight;\r\n    init();\r\n})","import '../scss/main.scss'\r\n\r\nimport  './canvas.js'\r\n\r\n//* parcel-bundler fix for audio (only loads paths from require, imports, workers)\r\nlet p1 = require('../Assets/Audio/calm2.mp3');\r\nlet p2 = require('../Assets/Audio/cardFlip.wav');\r\nlet p3 = require('../Assets/Audio/matching.wav');\r\nlet p4 = require('../Assets/Audio/victory2.wav');\r\nlet p5 = require('../Assets/Audio/waterOver.wav');\r\n\r\n\r\n\r\nclass AudioController { \r\n    // tracking audio/volume properties\r\n    constructor() {\r\n               this.bgMusic = new Audio(p1);\r\n                this.flipSound = new Audio(p2);\r\n                this.matchSound = new Audio(p3);\r\n                this.victorySound = new Audio(p4);\r\n                this.gameOverSound = new Audio(p5);\r\n                 this.bgMusic.volume = 0.04; // base game's track volume\r\n         this.flipSound.volume = 0.05; \r\n        this.victorySound.volume = 0.01;\r\n        this.gameOverSound.volume = 0.01;\r\n        this.matchSound.volume = .09;\r\n        \r\n       this.bgMusic.loop = true; // to loop\r\n        \r\n    }\r\n    startMusic() {\r\n        this.bgMusic.play();  // for when we call this via 'new' ac or somefin\r\n      //  this.bgMusic.volume = 0.6;\r\n    } \r\nstopMusic() {\r\nthis.bgMusic.pause();// no stop functionality in js so pause()\r\nthis.bgMusic.currentTime = 0; //putting music time to zero so it replays from beginning when paused\r\n}\r\n\r\n    flip() {\r\n        this.flipSound.play();\r\n    }\r\n    match() {\r\n        this.matchSound.play();\r\n    }\r\n    victory() {\r\n        this.stopMusic(); // to stop MAIN music when we win, \r\n        this.victorySound.play(); // and play VICTORY music\r\n}\r\n\r\n gameOver() {\r\n  this.stopMusic();\r\n    this.gameOverSound.play();\r\n }\r\n \r\n}\r\nclass MixOrMatch {\r\n    constructor(totalTime, cards) {\r\n        this.cardsArray = cards;\r\n        this.totalTime = totalTime;\r\n        this.timeRemaining = totalTime;\r\n        this.timer = document.getElementById('time-remaining');\r\n        this.ticker = document.getElementById('flips');\r\n        this.ac = new AudioController(); // Inheriting AudioController and its properties to 'ac'\r\n    }\r\n    //! note: class constructors ONLY get called ONCE when written and when 'new' is made\r\n    //! so we CALL a function for this (startGame) to be called multiple times\r\n\r\n    startGame() {\r\n  \r\n        this.cardToCheck = null; // no card to check, so cardtocheck is on null (when not match)\r\n        this.totalClicks = 0; // to reset clicks\r\n        this.timeRemaining = this.totalTime; // to reset time depending on set variable\r\n        this.matchedCards = []; // where all the matched cards will go so we know if matched. But set to empty at start\r\n        this.busy = true; // to check if allowed to flip a card\r\n\r\n  \r\n        setTimeout(() => {\r\n            this.ac.startMusic();\r\n            this.shuffleCard(this.cardsArray);\r\n            this.countDown = this.startCountDown();\r\n            this.busy = false;\r\n        }, 500);\r\n        this.hideCards();\r\n        this.timer.innerText = this.timeRemaining;\r\n        this.ticker.innerText = this.totalClicks;\r\n    }\r\n    hideCards() {\r\n        this.cardsArray.forEach(card => {\r\n            card.classList.remove('visible');\r\n            card.classList.remove('matched');\r\n        });\r\n    }\r\n\r\n\r\n\r\n    flipCard(card) { //* this is called in orignal forEach we initiated\r\n        if(this.canFlipCard(card)) {// if(true) canFlipCard returns true\r\n            this.ac.flip();\r\n            this.totalClicks++;\r\n            this.ticker.innerText = this.totalClicks; // to increment flips #\r\n            card.classList.add('visible');\r\n\r\n            if(this.cardToCheck) //if is not null\r\n                    // check if match\r\n                    this.checkForCardMatch(card);\r\n            else    \r\n                    this.cardToCheck = card;\r\n\r\n\r\n        }\r\n    }\r\n\r\n    // grab card and compare to other| push to cardMatch/ or cardMisMatch\r\n    checkForCardMatch(card) {\r\n        if(this.getCardType(card) === this.getCardType(this.cardToCheck))\r\n            this.cardMatch(card, this.cardToCheck);\r\n        else\r\n            this.cardMisMatch(card, this.cardToCheck);\r\n\r\n        this.cardToCheck = null;\r\n    }\r\n    //push card1/card2 to array if matched\r\n    cardMatch(card1, card2) {\r\n        this.matchedCards.push(card1);\r\n        this.matchedCards.push(card2);\r\n        card1.classList.add('matched');\r\n        card2.classList.add('matched');\r\n        this.ac.match(); // play 'isMatched' sound\r\n        if(this.matchedCards.length === this.cardsArray.length)\r\n            this.victory();\r\n    }\r\n\r\n    // remove visible if no match, cannot flip until timeout finishes.\r\n    cardMisMatch(card1, card2) {\r\n        this.busy = true;\r\n        setTimeout(() => {\r\n            card1.classList.remove('visible');\r\n            card2.classList.remove('visible'); \r\n            this.busy = false;\r\n        }, 1000);\r\n    }\r\n\r\n\r\n\r\n    getCardType(card) {\r\n        return card.getElementsByClassName('card-value')[0].src;\r\n    }\r\n\r\n\r\n    // timer countdown. \r\n    startCountDown() {\r\n        return setInterval(() => { \r\n            this.timeRemaining--; \r\n            this.timer.innerText = this.timeRemaining; \r\n            if(this.timeRemaining === 0)\r\n                this.gameOver();\r\n        }, 1000);\r\n    }\r\n\r\n    // banner overlays\r\n    gameOver() {\r\n        clearInterval(this.countDown);\r\n        this.ac.gameOver();\r\n        document.getElementById('game-over-text').classList.add('visible');\r\n    }\r\n\r\n    victory() {\r\n        clearInterval(this.countDown);\r\n        this.ac.victory();\r\n        document.getElementById('victory-text').classList.add('visible');\r\n    }\r\n\r\n\r\n\r\n    shuffleCard() { //static function | remember: 'cardsArray = cards' in mixOrMatch constructor\r\n    for(let i = this.cardsArray.length -1; i > 0; i--) {  //fisher yates shuffle pattern\r\n         let randIndex = Math.floor(Math.random() * (i+1));      //looping through this backwards\r\n         // detects ALL cards, grabs length(16) loops downwards. everyloop gets random int for grid\r\n     //? length - 1 because need it to start from 0-15, instead of grabbing full length of 16\r\n      //* (i+1)); because we already set i to [0-15]  cant mult by 0, so adding 1 so its (1-16) when in formula \r\n            this.cardsArray[randIndex].style.order = i; \r\n          //links to the grid-order prototype in style of '.card'| = i is 0 bound, so [0-15]. \r\n            this.cardsArray[i].style.order = randIndex;\r\n        }\r\n    }\r\n    canFlipCard(card) { \r\n    // NOT allowed to flip card when....\r\n            // this.busy = true\r\n            // clicking on card that is already matched\r\n            // one is already clicked and checking for a match\r\n            return (!this.busy && !this.matchedCards.includes(card) && card != this.cardToCheck)\r\n            // return true if all these are false\r\n    }\r\n}\r\n\r\n\r\n// if page hasn't loaded yet, wait for page to load before running js. \r\n//start\r\nif(document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', ready()); // 'DOMContentLoaded' = once everything in htmlDOM has loaded. call function\r\n} else {\r\n    ready();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ? tip: getElementbyClassName \r\n//         1 returns an HTMLCollection, which needs to be converted to an array BUT is live loaded. \r\n\r\n// ? tip: querySelectorAll  \r\n//         1 returns a nodelist, forEach works for nodeLists, BUT nodelist is NOT ARRAY and not live loaded | BUT CAN CALL ANYTHING YO, div > li\r\n//                         STILL NEEDS TO BE CONVERTED TO ARRAY to access array prototypes methods (push/pop/slice)\r\n//         2 note: cant convert queryselectorall to array when just pulling a div. \r\n//                   might be because its not hot loaded/live like getelementsbyclassName\r\n  \r\n        \r\n\r\n\r\n\r\n//hotlive so className\r\n//start\r\nfunction ready () { \r\n    let overlays = [...(document.getElementsByClassName('overlay-text'))]; //array of these overlay-text elements\r\n   \r\n     //* need it to be an array for future purposes.\r\n     let cards = Array.from(document.getElementsByClassName('card')); \r\n     //* instance of the object flipcard(card)\r\n     let game = new MixOrMatch(50, cards); //? links to constructor and passes (arguments,arguments)\r\n    \r\n     //flips all visible cards\r\n    overlays.forEach(overlay => { //can use forEach here now since overlay-text was converted\r\n        overlay.addEventListener('click', () => {\r\n            overlay.classList.remove('visible');\r\n             game.startGame();\r\n        });\r\n    });  \r\n\r\n    //on any card click, call flip card with selected card\r\n    cards.forEach(card => {\r\n        card.addEventListener('click', () => {\r\n            //MixOrMatch constructor .flipCard function\r\n             game.flipCard(card);           \r\n        });\r\n    });\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}